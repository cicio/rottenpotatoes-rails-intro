Setting up the environment to use BDD in Rottenpotatoes App improvement

1. Use the text of the Homework 2 of the CS1691x Course : https://github.com/saasbook/hw-rails-intro  as the basis for user stories and derive features that will inform the Cucumber Features and Scenarios of the BDD cycle. 

2. After cloning the homework at: https://github.com/cicio/rottenpotatoes-rails-intro
  "git clone git@github.com/cicio/rottenpotatoes-rails-intro"
  
3. Added gems to Gemfile
		gem 'autotest'
		gem 'autotest-rails'

4. run: "bundle install --without production"

5. edit ' ./.autotest' file to following content

Autotest.add_hook :initialize do |at|
  # Ignore files in [tmp .git webrat.log vendor index .DS_Store ._] 
  %w{tmp .git webrat.log vendor index .DS_Store ._}.each {|exception| at.add_exception(exception)}
end
		
this will prevent autotest to run indefinitely, caused by the constant changing files in the folders that are not related to the test anyway.

6. Now let us run autotest with following command:

    bundle exec autotest features/ spec/
    
    In the case of my startup User Story I get this output:
    
Miguels-MBP:rottenpotatoes-rails-intro mwcruz$ bundle exec autotest  features/ spec/
loading autotest/cucumber_rails
/usr/local/Cellar/ruby/2.2.2/bin/ruby /usr/local/lib/ruby/gems/2.2.0/gems/cucumber-1.3.20/bin/cucumber --profile autotest --format rerun --out /var/folders/76/lw0c01350pdbztxxwfs64b9w0000gn/T/autotest-cucumber20151106-5767-16vljeo 
Using the autotest profile...
Feature: Sort List of Movies
  
7. Now we will start by defining the Features and Scenarios
7.1 First Feature - ./features/sort_movie_list.feature

 Feature: Sort List of Movies

	As a movie's Reviewer
	In order to easily find the movies I want to review
	I want to sort the movies by title or release date in ascending order
	
	

	
Background:
	Given the following movies exist:
    |title                  |rating |release_date   |
    |Inception				|PG-13	|2010-07-16		|
    |It's Complicated		|R		|2009-12-25		|
    |SaaS The Movie			|G		|2012-01-14		|
	
	
Scenario: Make the column headings for "Movie Title" and "Release Date" into clickable links
	  When I visit the "index" page
	  Then I should see link for "Movie Title" and "Release Date" within "thead"
	  But  I should see "Rating" within "thead"
	
Scenario: Clicking "Movie Title" reloads movies sorted in ascending order by title.
	  Given I have clicked to sort by "Movie Title" from the "index" page
	  Then I should see "Inception" before "It's Complicated"
      And I should see "It's Complicated" before "SaaS The Movie"
      
Scenario: Clicking "Release Date" reloads movies sorted in ascending order by release date.
	  Given I have clicked to sort by "Release Date" from the "index" page
	  Then I should see "It's Complicated" before "Inception"
      And I should see "SaaS The Movie" before "It's Complicated"

7.2 define the steps for these scenarios ./features/steps.rb
  
Given(/^the following movies exist:$/) do |table|
  # table is a Cucumber::Ast::Table
  table.hashes.each do |movie|
    Movie.create(movie)
    @movies = Movie.all
  end
end

Then(/^I should be on the "(.*?)" page$/) do |page|
  page =~ /index/ ? (expect(current_path).to eq movies_path) : (expect(current_path).to eq movies_path(page)) 
end 

When(/^I (?:visit|am on) the "(.*?)" page$/) do |link|
  visit movies_path if link =~ /index/
  visit movies_path(link)
end

Then(/^I should see link for "(.*?)" and "(.*?)" within "(.*?)"$/) do |link1, link2, scope|
  within(scope) do
    expect(find_link(link1))
    expect(find_link(link2))
  end
end

Then(/^I should see "(.*?)" within "(.*?)"$/) do |col, scope|
  within(scope) do
    expect(has_text?(col))
  end
end

When(/^I click on "(.*?)"$/) do |link1|
  click_on(link1)
  expect(current_path).to eq movies_path
end


Given(/^I have clicked to sort by "(.*?)" from the "(.*?)" page$/) do |link, path|
  steps %Q{
  			Given I am on the "#{path}" page
  			When I click on "#{link}"
  			Then I should be on the "#{path}" page
  			}
end

Then(/^I should see "(.*?)" before "(.*?)"$/) do |string1, string2|
  regexp = /#{string1}.*#{string2}/m
  expect(assert_text(:all, regexp)).to eq true
end


8. After hitting the first Red Cucumber, we need to head to TDD phase by performing Unit test with RSpec.
In Rails 4. the RSpec 3.x configuration has changed (read: https://www.relishapp.com/rspec/rspec-rails/docs/upgrade#default-helper-files) 
the *_spec.rb files now require 'rails_helper'  instead of require 'spec_helper'
Generators run in RSpec 3.x will require rails_helper and not spec_helper.

  Seconf change in Rspec 3.x is:
  
File-type inference disabled by default
Previously we automatically inferred spec type from a file location, this
was a surprising behaviour for new users and undesirable for some veteran users
so from RSpec 3 onwards this behaviour must be explicitly opted into with:

		RSpec.configure do |config|
		  config.infer_spec_type_from_file_location!
		end


9. Let us use factory_girl_rails instead of doubles or fixtures to fake the bahavior of the database during test and allow to preserve the Independence between tests.
create following file:  spec/factories/movie.rb with following content
 
		FactoryGirl.define do
		  factory :movie do
			title 'A Fake Title' # default values
			rating 'PG'
			release_date { 10.years.ago }
		  end
		end

    		
  